#!/usr/bin/env python3

import os
import sys
import argparse
import subprocess
import platform
from pathlib import Path

def get_script_dir():
    """Get the directory where this script is located."""
    return os.path.dirname(os.path.abspath(__file__))

def start_server(cursor_mode=False, transport="sse", port=8080):
    """Start the MCP server."""
    script_dir = get_script_dir()
    mcp_script = os.path.join(script_dir, "mcp_server.py")
    
    print("Starting FeedbackFlow MCP server...")
    try:
        # Build command with appropriate arguments
        cmd = [sys.executable, mcp_script]
        if cursor_mode:
            cmd.append("--cursor")
        if transport:
            cmd.extend(["--transport", transport])
        if port:
            cmd.extend(["--port", str(port)])
            
        # Use subprocess.run to start the server in the foreground
        subprocess.run(cmd, check=True)
    except KeyboardInterrupt:
        print("\nMCP server stopped.")
    except subprocess.CalledProcessError as e:
        print(f"Error starting MCP server: {e}")
        sys.exit(1)

def stop_server():
    """Stop the MCP server if running as a service."""
    system = platform.system()
    if system == "Linux" or system == "Darwin":  # Linux or macOS
        print("Stopping FeedbackFlow MCP service...")
        try:
            subprocess.run(["systemctl", "--user", "stop", "feedbackflow-mcp.service"], check=True)
            print("MCP service stopped.")
        except subprocess.CalledProcessError as e:
            print(f"Error stopping MCP service: {e}")
            sys.exit(1)
    else:
        print("Stopping the MCP service is only supported on Linux and macOS with systemd.")
        print("If running the server directly, use Ctrl+C to stop it.")

def status_server():
    """Check the status of the MCP server."""
    print("Checking FeedbackFlow MCP service status...")
    
    # Check if we're on macOS
    if platform.system() == "Darwin":
        # macOS doesn't have systemctl, use alternative method
        try:
            # Check if the process is running using pgrep or ps
            result = subprocess.run(["pgrep", "-f", "mcp_server.py"], 
                                   stdout=subprocess.PIPE, 
                                   stderr=subprocess.PIPE)
            if result.returncode == 0:
                print("FeedbackFlow MCP server is running.")
            else:
                print("FeedbackFlow MCP server is not running.")
        except Exception as e:
            print(f"Error checking server status: {e}")
    elif platform.system() == "Windows":
        # Windows-specific status check
        try:
            result = subprocess.run(["tasklist", "/FI", "IMAGENAME eq python.exe"], 
                                   stdout=subprocess.PIPE, 
                                   stderr=subprocess.PIPE, 
                                   text=True)
            if "mcp_server.py" in result.stdout:
                print("FeedbackFlow MCP server is running.")
            else:
                print("FeedbackFlow MCP server is not running.")
        except Exception as e:
            print(f"Error checking server status: {e}")
    else:
        # Linux with systemd
        try:
            subprocess.run(["systemctl", "--user", "status", "feedbackflow-mcp.service"], check=True)
        except subprocess.CalledProcessError:
            print("FeedbackFlow MCP service is not running or has errors.")
        except FileNotFoundError:
            print("systemctl not found. If you're not using systemd, try starting the server manually with:")
            print("  python mcp_server.py")

def install_server():
    """Install the MCP server."""
    script_dir = get_script_dir()
    install_script = os.path.join(script_dir, "install_mcp.py")
    
    print("Installing FeedbackFlow MCP server...")
    try:
        subprocess.run([sys.executable, install_script], check=True)
        print("MCP server installation completed.")
    except subprocess.CalledProcessError as e:
        print(f"Error installing MCP server: {e}")
        sys.exit(1)

def setup_cursor():
    """Set up the MCP server for Cursor integration."""
    script_dir = get_script_dir()
    mcp_script = os.path.join(script_dir, "mcp_server.py")
    
    print("Setting up FeedbackFlow MCP for Cursor integration...")
    
    # Print instructions for adding to Cursor
    print("\n=== Cursor Integration Instructions ===")
    print("\nTo add FeedbackFlow MCP to Cursor:")
    print("1. Open Cursor IDE")
    print("2. Go to Settings > Features > MCP Servers")
    print("3. Click 'Add New MCP Server'")
    print("4. Use the following settings:")
    print("   - Name: FeedbackFlow")
    print(f"   - Command: {sys.executable} {os.path.abspath(mcp_script)} --cursor")
    print("\nAlternatively, you can use the SSE transport with:")
    print("   - Name: FeedbackFlow")
    print("   - URL: http://localhost:8080")
    
    # Ask if user wants to start the server now
    print("\nWould you like to start the MCP server now? (y/n)")
    choice = input().strip().lower()
    if choice == 'y' or choice == 'yes':
        start_server(cursor_mode=True, transport="stdio")

def main():
    parser = argparse.ArgumentParser(description="FeedbackFlow MCP Server Management Tool")
    subparsers = parser.add_subparsers(dest="command", help="Command to execute")
    
    # Start command
    start_parser = subparsers.add_parser("start", help="Start the MCP server")
    start_parser.add_argument("--cursor", action="store_true", help="Start in Cursor integration mode")
    start_parser.add_argument("--transport", choices=["sse", "stdio"], default="sse", 
                             help="Transport protocol to use (default: sse)")
    start_parser.add_argument("--port", type=int, default=8080, 
                             help="Port to run the server on (default: 8080)")
    
    # Stop command
    stop_parser = subparsers.add_parser("stop", help="Stop the MCP server service")
    
    # Status command
    status_parser = subparsers.add_parser("status", help="Check the status of the MCP server")
    
    # Install command
    install_parser = subparsers.add_parser("install", help="Install the MCP server")
    
    # Cursor setup command
    cursor_parser = subparsers.add_parser("cursor", help="Set up for Cursor integration")
    
    args = parser.parse_args()
    
    if args.command == "start":
        start_server(
            cursor_mode=args.cursor,
            transport=args.transport,
            port=args.port
        )
    elif args.command == "stop":
        stop_server()
    elif args.command == "status":
        status_server()
    elif args.command == "install":
        install_server()
    elif args.command == "cursor":
        setup_cursor()
    else:
        parser.print_help()

if __name__ == "__main__":
    main() 